/*
Author: Tyler Jenkins
Date: 10/9/17
 */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <ctype.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <time.h>

//-- file format --
#define EXT2_S_IFSOCK	0xC000	//socket
#define EXT2_S_IFLNK	0xA000	//symbolic link
#define EXT2_S_IFREG	0x8000	//regular file
#define EXT2_S_IFBLK	0x6000	//block device
#define EXT2_S_IFDIR	0x4000	//directory
#define EXT2_S_IFCHR	0x2000	//character device
#define EXT2_S_IFIFO	0x1000	//fifo
//--process execution user/group override --
#define EXT2_S_ISUID	0x0800	//Set process User ID
#define EXT2_S_ISGID	0x0400	//Set process Group ID
#define EXT2_S_ISVTX	0x0200	//sticky bit
//-- access rights --
#define EXT2_S_IRUSR	0x0100	//user read
#define EXT2_S_IWUSR	0x0080	//user write
#define EXT2_S_IXUSR	0x0040	//user execute
#define EXT2_S_IRGRP	0x0020	//group read
#define EXT2_S_IWGRP	0x0010	//group write
#define EXT2_S_IXGRP	0x0008	//group execute
#define EXT2_S_IROTH	0x0004	//others read
#define EXT2_S_IWOTH	0x0002	//others write
#define EXT2_S_IXOTH	0x0001	//others execute

typedef struct __attribute__((packed)) {
    unsigned int        s_inodes_count;
    unsigned int        s_blocks_count;
    unsigned int        s_r_blocks_count;
    unsigned int        s_free_blocks_count;
    unsigned int        s_free_inodes_count;
    unsigned int        s_first_data_block;
    unsigned int        s_log_block_size;
    unsigned int        s_log_frag_size;
    unsigned int        s_blocks_per_group;
    unsigned int        s_frags_per_group;
    unsigned int        s_inodes_per_group;
    unsigned int        s_mtime;
    unsigned int        s_wtime;
    unsigned short        s_mnt_count;
    unsigned short        s_max_mnt_count;
    unsigned short        s_magic;
    unsigned short        s_state;
    unsigned short        s_errors;
    unsigned short        s_minor_rev_level;
    unsigned int        s_lastcheck;
    unsigned int        s_checkinterval;
    unsigned int        s_creator_os;
    unsigned int        s_rev_level;
    unsigned short        s_def_resuid;
    unsigned short        s_def_resgid;
    unsigned int        s_first_ino;
    unsigned short        s_inode_size;
    unsigned short        s_block_group_nr;
    unsigned int        s_feature_compat;
    unsigned int        s_feature_incompat;
    unsigned int        s_feature_ro_compat;
    char      s_uuid[16];
    char      s_volume_name[16];
    char      s_last_mounted[64];
    char      unused[824];
}SUPERBLOCK;

typedef struct __attribute__((packed)) {
  unsigned int bg_block_bitmap;
  unsigned int bg_inode_bitmap;
  unsigned int bg_inode_table;
  unsigned short bg_free_blocks_count;
  unsigned short bg_free_inodes_count;
  unsigned short bg_used_dirs_count;
  unsigned short bg_pad;
  unsigned char bg_reserved[12];
  char unused[992];
} BGDT;

typedef struct __attribute__((packed)) {
  unsigned short i_mode;
  unsigned short i_uid;
  unsigned int i_size;
  unsigned int i_atime;
  unsigned int i_ctime;
  unsigned int i_mtime;
  unsigned int i_dtime;
  unsigned short i_gid;
  unsigned short i_links_count;
  unsigned int i_blocks;
  unsigned int i_flags;
  unsigned int _i_osd1;
  unsigned int i_block[15];
  unsigned int i_generation;
  unsigned int i_file_acl;
  unsigned int i_dir_acl;
  unsigned int i_faddr;
  unsigned char i_osd2[12]; //don't feel like using i_osd2 struct
} INODE;

typedef struct __attribute__((packed)) {
  unsigned int inode;
  unsigned short rec_len;
  unsigned char name_len;
  unsigned char file_type;
  unsigned char name[255];
} DIR_STRUCT;

int main(int argc,char **argv)
{
   int fd;
   int rv;
   SUPERBLOCK sb;
   BGDT bg;
   INODE in;
   DIR_STRUCT dir;
   time_t t;
   struct tm *tp;   // time pointer
   int i;

   if(argc<2){
     fprintf(stderr,"usage: %s <disk>\n",argv[0]);
     exit(1);
   }
   
   //fprintf(stderr,"sizeof superblock = %ld\n", sizeof(SUPERBLOCK));
   fd = open(argv[1], O_RDONLY);
   if(fd < 0){
     fprintf(stderr,"cannot open %s\n",argv[1]);
     exit(0);
   }
   lseek(fd,1024,SEEK_SET); //go to second block- where superblock is
   rv = read(fd, &sb, sizeof(SUPERBLOCK));  //read superblock
   if(rv != sizeof(SUPERBLOCK)){
     fprintf(stderr,"bad superblock read\n");
     exit(0);
   }
   printf("%d\n",sb.s_inode_size);
   printf("%d\n",sb.s_inodes_per_group);
   t = sb.s_wtime;

   rv = read(fd, &bg, sizeof(BGDT));  //read block group descriptor table
   if(rv != sizeof(BGDT)){
     fprintf(stderr,"bad block group read\n");
     exit(0);
   }

   printf("%d\n",bg.bg_inode_table);
   // printf("%d\n",bg.bg_free_blocks_count);
   
   lseek(fd,1024*(bg.bg_inode_table),SEEK_SET); //go to where inode table is
   //lseek(fd,(1024*(bg.bg_inode_table))+(1024-sizeof(BGDT)),SEEK_SET);
   //lseek(fd,sizeof(INODE)*(sb.s_first_ino-1),SEEK_SET); //go to where first inode is in block
   lseek(fd,sizeof(INODE)*(sb.s_first_ino-1),SEEK_CUR); //go to where first inode is in block
   
   
   rv = read(fd, &in, sizeof(INODE));  //read inode
   if(rv != sizeof(INODE)){
     fprintf(stderr,"bad inode read\n");
     exit(0);
     }

   //printf("%d\n",in.i_mode & EXT2_S_IFDIR);
   printf("%d\n",in.i_block[0]);

   lseek(fd,(1024*in.i_block[0]),SEEK_SET);
   /*rv = read(fd, &dir, sizeof(DIR_STRUCT));  
   if(rv != sizeof(DIR_STRUCT)){
     fprintf(stderr,"bad directory read\n");
     exit(0);
     }
   printf("%d\n",dir.name_len);
    for(i=0;i<255;i++)
    printf("%c \n",dir.name[i]);*/

   //   lseek(fd,dir.rec_len,SEEK_CUR);
    rv = read(fd, &dir, sizeof(DIR_STRUCT)-255);  
   if(rv != sizeof(DIR_STRUCT)-255){
     fprintf(stderr,"bad directory read\n");
     exit(0);
     }
   rv = read(fd, &dir.name, dir.name_len);
   printf("\n%d\n",dir.name_len);
   printf("%s\n",dir.name);

   lseek(fd,dir.rec_len-(sizeof(DIR_STRUCT)-255)+dir.name_len-2,SEEK_CUR);

   rv = read(fd, &dir, sizeof(DIR_STRUCT)-255);  
   if(rv != sizeof(DIR_STRUCT)-255){
     fprintf(stderr,"bad directory read\n");
     exit(0);
     }
   rv = read(fd, &dir.name, dir.name_len+1);
   printf("%d\n",dir.name_len);
   //for(i=0;i<10;i++)
     printf("%s\n",dir.name);

   lseek(fd,dir.rec_len-(sizeof(DIR_STRUCT)-255)+dir.name_len-2,SEEK_CUR);

   rv = read(fd, &dir, sizeof(DIR_STRUCT)-255);  
   if(rv != sizeof(DIR_STRUCT)-255){
     fprintf(stderr,"bad directory read\n");
     exit(0);
     }
   rv = read(fd, &dir.name, dir.name_len+1);
   printf("%d\n",dir.rec_len);
   //for(i=0;i<10;i++)
     printf("%s\n",dir.name);
   close(fd);
}
