#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <ctype.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <fcntl.h>
#include <time.h>
#include <grp.h>
#include <pwd.h>

//-- file format --
#define EXT2_S_IFSOCK   0xC000  //socket
#define EXT2_S_IFLNK    0xA000  //symbolic link
#define EXT2_S_IFREG    0x8000  //regular file
#define EXT2_S_IFBLK    0x6000  //block device
#define EXT2_S_IFDIR    0x4000  //directory
#define EXT2_S_IFCHR    0x2000  //character device
#define EXT2_S_IFIFO    0x1000  //fifo
//--process execution user/group override --
#define EXT2_S_ISUID    0x0800  //Set process User ID
#define EXT2_S_ISGID    0x0400  //Set process Group ID
#define EXT2_S_ISVTX    0x0200  //sticky bit
//-- access rights --
#define EXT2_S_IRUSR    0x0100  //user read
#define EXT2_S_IWUSR    0x0080  //user write
#define EXT2_S_IXUSR    0x0040  //user execute
#define EXT2_S_IRGRP    0x0020  //group read
#define EXT2_S_IWGRP    0x0010  //group write
#define EXT2_S_IXGRP    0x0008  //group execute
#define EXT2_S_IROTH    0x0004  //others read
#define EXT2_S_IWOTH    0x0002  //others write
#define EXT2_S_IXOTH    0x0001  //others execute

#define K 1024
#define FD_NUM 100

#define ANSI_COLOR_BLUE    "\x1b[34m"
#define ANSI_COLOR_RESET   "\x1b[0m"

typedef struct __attribute__((packed)) {
    unsigned int        s_inodes_count;
    unsigned int        s_blocks_count;
    unsigned int        s_r_blocks_count;
    unsigned int        s_free_blocks_count;
    unsigned int        s_free_inodes_count;
    unsigned int        s_first_data_block;
    unsigned int        s_log_block_size;
    unsigned int        s_log_frag_size;
    unsigned int        s_blocks_per_group;
    unsigned int        s_frags_per_group;
    unsigned int        s_inodes_per_group;
    unsigned int        s_mtime;
    unsigned int        s_wtime;
    unsigned short      s_mnt_count;
    unsigned short      s_max_mnt_count;
    unsigned short      s_magic;
    unsigned short      s_state;
    unsigned short      s_errors;
    unsigned short      s_minor_rev_level;
    unsigned int        s_lastcheck;
    unsigned int        s_checkinterval;
    unsigned int        s_creator_os;
    unsigned int        s_rev_level;
    unsigned short      s_def_resuid;
    unsigned short      s_def_resgid;
    unsigned int        s_first_ino;
    unsigned short      s_inode_size;
    unsigned short      s_block_group_nr;
    unsigned int        s_feature_compat;
    unsigned int        s_feature_incompat;
    unsigned int        s_feature_ro_compat;
    char                s_uuid[16];
    char                s_volume_name[16];
    char                s_last_mounted[64];
    char                unused[824];
}SUPERBLOCK;

typedef struct __attribute__((packed)) {
  unsigned int bg_block_bitmap;
  unsigned int bg_inode_bitmap;
  unsigned int bg_inode_table;
  unsigned short bg_free_blocks_count;
  unsigned short bg_free_inodes_count;
  unsigned short bg_used_dirs_count;
  unsigned short bg_pad;
  unsigned char bg_reserved[12];
  char unused[992];
} BGDT;

typedef struct __attribute__((packed)) {
  unsigned short i_mode;
  unsigned short i_uid;
  unsigned int i_size;
  unsigned int i_atime;
  unsigned int i_ctime;
  unsigned int i_mtime;
  unsigned int i_dtime;
  unsigned short i_gid;
  unsigned short i_links_count;
  unsigned int i_blocks;
  unsigned int i_flags;
  unsigned int _i_osd1;
  unsigned int i_block[15];
  unsigned int i_generation;
  unsigned int i_file_acl;
  unsigned int i_dir_acl;
  unsigned int i_faddr;
  unsigned char i_osd2[12]; //don't feel like using i_osd2 struct
} INODE;

typedef struct __attribute__((packed)) {
  unsigned int inode;
  unsigned short rec_len;
  unsigned char name_len;
  unsigned char file_type;
  unsigned char name[255];
} DIR_STRUCT;

typedef struct openstruct{
  int fd;
  int blocks[4];
  int block;
  int block_size;
  int ino_size;
  INODE in;
  int ino_index;
  SUPERBLOCK sb;
  BGDT bg;
  int offset;
}OPEN_STRUCT;

OPEN_STRUCT fdar[FD_NUM];
int fdinitflag=1;

char *months[12]={"Jan",
                  "Feb",
                  "Mar",
                  "Apr",
                  "May",
                  "Jun",
                  "Jul",
                  "Aug",
                  "Sep",
                  "Oct",
                  "Nov",
                  "Dec"};

void printmode(INODE in){

  if((in.i_mode & EXT2_S_IFDIR)>0)
    printf("d");
  else
    printf("-");
  if((in.i_mode & EXT2_S_IRUSR)>0)
    printf("r");
  else
    printf("-");
  if((in.i_mode & EXT2_S_IWUSR)>0)
    printf("w");
  else
    printf("-");
  if((in.i_mode & EXT2_S_IXUSR)>0)
    printf("x");
  else
    printf("-");
  if((in.i_mode & EXT2_S_IRGRP)>0)
    printf("r");
  else
    printf("-");
  if((in.i_mode & EXT2_S_IWGRP)>0)
    printf("w");
  else
    printf("-");
  if((in.i_mode & EXT2_S_IXGRP)>0)
    printf("x");
  else
    printf("-");
  if((in.i_mode & EXT2_S_IROTH)>0)
    printf("r");
  else
    printf("-");
  if((in.i_mode & EXT2_S_IWOTH)>0)
    printf("w");
  else
    printf("-");
  if((in.i_mode & EXT2_S_IXOTH)>0)
    printf("x");
  else
    printf("-");
}

void printdate(INODE in){
  struct tm *tp;
  time_t t=(time_t)in.i_atime;
  tp=localtime(&t);

  printf("%s %2d %2d:%02d",months[tp->tm_mon],tp->tm_mday,tp->tm_hour,tp->tm_min);

}

unsigned int findblock(int fd,INODE in,int *block){
  unsigned int inblock[K/4];

  if(block[0]<=11){//direct block
    block[0]++;
    return in.i_block[block[0]-1];
  }

  /*if(block[0]==11){ //first time in indirect block
    block[0]++;
    lseek(fd,in.i_block[block[0]]*K,SEEK_SET);
    read(fd,&inblock,K/4*sizeof(int));
    return inblock[0];
    }*/
  if(block[0]==12){ //in indirect block
    if(block[1]==((K/4)-1)){ //ready to go to first doubly indirect block
      block[1]=-1;
      block[2]=-1;
      block[0]++;
    }
    else{
      block[1]++;
      lseek(fd,in.i_block[block[0]]*K,SEEK_SET);
      read(fd,&inblock,K/4*sizeof(int));
      return inblock[block[1]-1];
    }

  }

  if(block[0]==13){ //doubly indirect block
    if(block[1]==((K/4)-1) && block[2]==((K/4)-1)){
      block[0]++;
      block[1]=-1;
      block[2]=-1;
      block[3]=-1;
      printf("Need triply indirect block\n");
    }
    else{
      if(block[2]==((K/4)-1)){
        block[2]=0;
        block[1]++;
      }
      else
        block[2]++;
      lseek(fd,K*in.i_block[block[0]],SEEK_SET);
      read(fd,&inblock,K/4*sizeof(int));
      lseek(fd,K*inblock[block[1]],SEEK_SET);
      read(fd,&inblock,K/4*sizeof(int));
      return inblock[block[2]];
    }
  }
  if(block[0]==14){
    if(block[1]==((K/4)-1) && block[2]==((K/4)-1) && block[3]==((K/4)-1)){
      printf("Too much memory used\n");
      return 0;
    }
    if(block[3]==((K/4)-1)){
      block[3]=0;
      if(block[2]==((K/4)-1)){
        block[2]=0;
        if(block[1]==((K/4)-1)){
          printf("Too much memory used\n");
          return 0;
        }
        else
          block[1]++;
      }
      else
        block[2]++;
    }
    else
      block[3]++;
    lseek(fd,K*in.i_block[block[0]],SEEK_SET);
    read(fd,&inblock,K/4*sizeof(int));
    lseek(fd,K*inblock[block[1]],SEEK_SET);
    read(fd,&inblock,K/4*sizeof(int));
    lseek(fd,K*inblock[block[2]],SEEK_SET);
    read(fd,&inblock,K/4*sizeof(int));
    return inblock[block[3]];
      }
  return 0;

}

void myls(int fd,DIR_STRUCT dir,INODE in){
  printf("%2d ",dir.inode);
  printmode(in);
  printf(" %2d %5s %5s %5d ",in.i_links_count,
         getpwuid((uid_t)in.i_uid)->pw_name,
         getgrgid((gid_t)in.i_gid)->gr_name,
         in.i_size);

  printdate(in);
  if(in.i_mode & EXT2_S_IFDIR)
    printf(ANSI_COLOR_BLUE " %s" ANSI_COLOR_RESET "/\n",dir.name); //https://stackoverflow.com/questions/3219393/stdlib-and-colored-output-in-c                                               
  else{
    printf(" %s\n",dir.name);
  }

}

void print_ino(int fd,INODE in,int block_size){
  int pos=0;
  int blocks[4]={0,0,0,0};
  int block=findblock(fd,in,blocks);
  unsigned char c=1;
  int bread=0;
  lseek(fd,block * block_size,SEEK_SET);
  while(bread<=in.i_size && c){
    read(fd,&c,1);
    pos++;
    //bread++;
    printf("%c",c);
    if(pos>=block_size){
      block=findblock(fd,in,blocks);
      lseek(fd,block*block_size,SEEK_SET);
      pos=0;
    }
  }

}

void myls2(int fd,INODE root,int block_size,SUPERBLOCK sb,BGDT bg){
  DIR_STRUCT dir;
  int pos;
  int block;
  int blocks[4]={0,0,0,0};
  int rv=0;
  INODE in;

  dir.inode=1;
  pos=0;
  block=findblock(fd,root,blocks);

  while(dir.inode){
    lseek(fd,(block_size*block)+pos,SEEK_SET);
    rv=read(fd,&dir,sizeof(DIR_STRUCT)-255);
    if(rv!=(sizeof(DIR_STRUCT)-255)){
      fprintf(stderr,"Bad directory entry read\n");
      exit(0);
    }
    read(fd,&dir.name,dir.name_len);
    dir.name[dir.name_len]=0;
    pos+=dir.rec_len;

    if(dir.inode!=0){
      lseek(fd,(block_size*bg.bg_inode_table)+(sb.s_inode_size*(dir.inode-1)),SEEK_SET);
      rv=read(fd,&in,sizeof(INODE));
      if(rv!=sizeof(INODE)){
        fprintf(stderr,"Bad inode read\n");
        exit(0);
      }
      myls(fd,dir,in);

    }
    if(pos>=block_size){
      pos=0;
      block=findblock(fd,root,blocks);
    }
  }
  return;
}

unsigned int search(int fd,INODE root,int block_size,SUPERBLOCK sb,BGDT bg,char *fname){
  DIR_STRUCT dir;
  int pos;
  int block;
  int blocks[4]={0,0,0,0};
  int rv=0;
  INODE in;

  dir.inode=1;
  pos=0;
  block=findblock(fd,root,blocks);

  while(dir.inode){
    lseek(fd,(block_size*block)+pos,SEEK_SET);
    rv=read(fd,&dir,sizeof(DIR_STRUCT)-255);
    if(rv!=(sizeof(DIR_STRUCT)-255)){
      fprintf(stderr,"Bad directory entry read\n");
      exit(0);
    }
    read(fd,&dir.name,dir.name_len);
    dir.name[dir.name_len]=0;
    pos+=dir.rec_len;

    if(dir.inode!=0){
      lseek(fd,(block_size*bg.bg_inode_table)+(sb.s_inode_size*(dir.inode-1)),SEEK_SET);
      rv=read(fd,&in,sizeof(INODE));
      if(rv!=sizeof(INODE)){
        fprintf(stderr,"Bad inode read\n");
        exit(0);
      }
      //myls(fd,dir,in);
      if(strncmp(fname,dir.name,strlen(fname))==0)
        return dir.inode-1;
    }
    if(pos>=block_size){
      pos=0;
      block=findblock(fd,root,blocks);
    }
  }
  return 0;
}


int split(char *fname,char *pieces){
  int i=0;
  char a[K];

  for(i=1;(i<strlen(fname)) && fname[i]!='/';i++);

  strncpy(pieces,fname,i);
  pieces[i]=0;
  //fname+=i;
  if(fname[i]=='/')
    return i+1;
  return -1;
  printf("%s %s\n",fname,pieces);

  printf("%d\n",i);
}

int findfile(int fd,const char *fname,SUPERBLOCK sb,BGDT bg,int block_size,INODE root){
  char *namecp=strdup(fname);
  char pieces[K];
  int disp,tdisp=0;
  DIR_STRUCT dir;
  INODE in=root;
  int blocks[4];
  int block;
  int pos;
  
  while((in.i_mode & EXT2_S_IFDIR) && namecp ){
    disp=split(namecp,pieces);
    printf("%s\n",pieces);
    if(disp<0)//didn't find '/'
      break;
    tdisp+=disp;
    namecp+=disp;
    blocks[0]=blocks[1]=blocks[2]=blocks[3]=0;
    block=0;
    block=findblock(fd,in,blocks);
    
  }
  printf("%s\n",pieces);
  namecp-=tdisp;
  free(namecp);
}


int myopen(int fd, char *fname,INODE root,int block_size,SUPERBLOCK sb,BGDT bg){//find file within already opened filesystem
  DIR_STRUCT dir;
  INODE in=root;
  //  INODE f;
  int disp,rv;
  char pieces[K];
  unsigned int inloc=0;
  char fcpy[K];
  strcpy(fcpy,fname);//copy filename
  //  f.i_mode=f.i_size=0;

    if(!(root.i_mode & EXT2_S_IFDIR)){//directory given not directory
      fprintf(stderr,"Inode given not directory\n");
      return -1;
    }

    while(fname && pieces){
      disp=split(fname,pieces);
      fname+=disp;
      if(disp<0) //no more directories to go to
        break;
      inloc=search(fd,in,block_size,sb,bg,pieces); //find index of inode for directory
      //printf("%d %s %s\n",inloc,pieces,fname);
      if(inloc==0){
        fprintf(stderr,"File %s not found\n",fcpy);
        exit(0);
      }
      lseek(fd,(bg.bg_inode_table*block_size)+(inloc * sb.s_inode_size),SEEK_SET);
      rv=read(fd,&in,sizeof(INODE));
      if(rv!=sizeof(INODE)){
        fprintf(stderr,"Bad inode read\n");
        exit(0);
      }
      if(!(in.i_mode & EXT2_S_IFDIR)){
        fprintf(stderr,"%s is not a directory\n",pieces);
        exit(0);
      }
    }
    inloc=search(fd,in,block_size,sb,bg,pieces);
    // printf("%s\n",pieces);
    if(inloc==0){
      fprintf(stderr,"File \'%s\' not found\n",fcpy);
      exit(0);
    }
    lseek(fd,(bg.bg_inode_table*block_size)+(inloc * sb.s_inode_size),SEEK_SET);
    rv=read(fd,&in,sizeof(INODE));
    if(rv!=sizeof(INODE)){
      fprintf(stderr,"Bad inode read\n");
      exit(0);
    }
    if(in.i_mode & EXT2_S_IFDIR) //just do ls
      myls2(fd,in,block_size,sb,bg);
    else if(in.i_mode & EXT2_S_IFREG){ //print file
      //print_ino(fd,in,block_size);
      return inloc;
        }
    //printf("%s\n",pieces);
  
  
  return -1;
}


int ext2open(const char *pathname, int flags, int mode){
  int fd=1,block_size;
  int ino_index=-1;
  int i,rv;
  int tdisp=0;
  int disp;
  SUPERBLOCK sb;
  BGDT bg;
  INODE root,in;
  char *fname=strdup(pathname); //get copy of pathname
  char path[K];
  char pieces[K];

  if(fdinitflag){ //initialize fd array if uninitialized
  for(i=0;i<FD_NUM;i++){
    fdar[i].fd=-1;
  }
  fdinitflag=0;
  }


  if(!getenv("DISK_NAME")){
      while(fd>0){ //break pathname into path to disk and path in disk
	disp=split(fname,pieces);
	if(disp<0)//didn't find '/'
	  break;
	tdisp+=disp;
	fname+=disp;
  //printf("%s\n",fname);
	if(!path[0]){
	  strcpy(path,pieces);
	}
	else
	  sprintf(path,"%s/%s",path,pieces);
	fd=open(path,O_DIRECTORY);
	close(fd);
      }
      sprintf(pieces,"%s",fname);
      if(fd>0 && fname){//stopped at directory, not file - go another step
	sprintf(path,"%s/%s",path,fname);
	pieces[0]='.';
	pieces[1]=0;
      }

      printf("%s\n%s\n",path,pieces);
      fname-=tdisp;
      free(fname); //free memory to copy of fname
    }
    else{
      sprintf(path,"%s",getenv("DISK_NAME"));
      sprintf(pieces,"%s",fname);
    }
    
  if(flags == O_RDONLY){//if mode is readonly
    fd=open(path,O_RDONLY);
    if(fd<1){
      fprintf(stderr,"File %s not found\n",pathname);
      return -1;
    }
  
    lseek(fd,K,SEEK_SET); //go to superblock
    rv=read(fd,&sb,sizeof(SUPERBLOCK));//read superblock
    if(rv!=sizeof(SUPERBLOCK)){
      fprintf(stderr,"Bad superblock read\n");
      close(fd);
      return -1;;
    }
    block_size=K<<sb.s_log_block_size; //get block size
    if(block_size>K){                  //if block size not K go to where block group descriptor table is
      lseek(fd,block_size,SEEK_SET);
    }
    rv=read(fd,&bg,sizeof(BGDT));     //read block group descriptor table
    if(rv!=sizeof(BGDT)){
      fprintf(stderr,"Bad block group descriptor table read\n");
      close(fd);
      return -1;
    }
    lseek(fd,(bg.bg_inode_table*block_size)+(sb.s_inode_size),SEEK_SET); //go to where root inode is
    rv=read(fd,&root,sizeof(INODE)); //read root inode
    if(rv!=sizeof(INODE)){
      fprintf(stderr,"Bad inode read\n");
      close(fd);
      return -1;
    }
    //need to break up path in disk and go to each inode until at file
    //findfile(fd,pieces,sb,bg,block_size,root);
    myopen(fd,pieces,root,block_size,sb,bg);
    close(fd);
    return fd;
  }
  else //for if user wants to do something other than just read
    return -1;
}

int ext2close(int fd){
  close(fdar[fd].fd);
  fdar[fd].fd=-1;
  fdar[fd].blocks[0]=fdar[fd].blocks[1]=fdar[fd].blocks[2]=fdar[fd].blocks[3]=0
  fdar[fd].block=0;
  fdar[fd]block_size=0;
  fdar[fd].ino_size=0;
  //INODE in;
  fdar[fd].ino_index;
  SUPERBLOCK sb;
  BGDT bg;
  int offset;
}